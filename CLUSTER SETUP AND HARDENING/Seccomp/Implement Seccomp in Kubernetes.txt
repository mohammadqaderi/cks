- Docker blocks around 66 syscalls with its default profile.
- To test this, we can use an open-source container introspection tool called AMI Contained.
- This tool can be run as a docker container and its provide information about the runtime used to create the container,
  its features, and the syscalls that are blocked

- docker run r.j3ss.co/amicontained amicontained

- Run it as a kubernetes pod: kubectl run amicontained --image=r.j3ss.co/amicontained -- amicontained
  - kubectl logs amicontained
  - The number of blocked syscalls is 22
  - The seccomp is disabled
  - This is because kubernetes does not support the seccomp by default

- To enable the seccomp in the pod container, we can use of a definition file with the following information:
  - Under the pod security context, add the following:
    seccompProfile:
      type: RuntimeDefault (Possible values are: RuntimeDefault, Unconfined, Localhost)
  - under the container security context, add the following:
    allowPrivilegedEscalation: false (this will ensure that the container will run with the bare minimum privileges
     it function properly)
  - This will change the amicontained pod logs to show that the seccomp is in filtering mode, and the blocked syscalls
    number is 64

  - To use a custom seccomp profile, do the following changes to the pod definition file:
    - Under the pod security context, add the following:
      seccompProfile:
        type: Localhost
        localhostProfile: <path to the custom json file>
    - Use a different image (Ex: ubuntu)
    - Note: the path to the custom json file must be relative to the default seccomp profile location /var/lib/kubelet/seccomp
      - To do this:
        - Create a directory mkdir -p /var/lib/kubelet/seccomp/profiles
        - In this directory, create an audit profile which will logs all the syscalls generated by the process running inside
          the container /var/lib/kubelet/seccomp/profiles/audit.json
        - Add the following content in this file: {"defaultAction": "SCMP_ACT_LOG"}
        - Now change the localhostProfile path to be: localhostProfile: profiles/audit.json

 - Once the pod is created, the syscalls generated by the process running inside the container will be logged in
   the /var/log/syslog file
 - To map the syscall numbers to the actual syscall name is to check the /usr/include/asm/unistd_64.h file
   grep -w 35 /usr/include/asm/unistd_64.h


- Exam Tip: you may be asked to copy an existing seccomp profile to the default seccomp location on all nodes
  of the kubernetes cluster, then you've to use it to create pods

- Checkout the following resource for more information: https://kubernetes.io/docs/tutorials/security/seccomp/